# ABSTRACTION IN OOP (Object Oriented Programming)
1. Abstraction is the concept of hiding the complex implementation from the user and only showing the necessary features of the object.
2. It is one of the four fundamental OOP concepts.
3. Abstraction can be achieved in two ways: Abstract Classes and Interfaces.
4. Abstract Classes: Abstract classes are classes that contain one or more abstract methods. An abstract method is a method that is declared, but contains no implementation.
5. Interfaces: Interfaces are similar to abstract classes, but they only contain abstract methods and final variables.
6. Abstraction helps in reducing programming complexity and effort.
7. For Example: In the context of an aeroplane, the user only needs to know how to fly the plane and not the internal working of the plane.
8. Abstraction is used to simplify the complex system by breaking it into small modules.


# ENCAPSULATION IN OOP (Object Oriented Programming)
1. Encapsulation is the concept of wrapping the data (variables) and code acting on the data (methods) together as a single unit.
2. It is one of the four fundamental OOP concepts.
3. Encapsulation helps in hiding the internal state of an object and restricting access to the object's internal data.
4. Encapsulation can be achieved by using access specifiers such as public, private, and protected.
5. Public: Public members are accessible from outside the class.
6. Private: Private members are only accessible within the class.
7. Protected: Protected members are accessible within the class and its subclasses.
8. Encapsulation helps in achieving data hiding, reusability, and modularity.
9. For Example: In the context of a car, the user only needs to know how to drive the car and not the internal working of the car.

Note: 
* Interfaces are similar to abstract classes, but they only contain abstract methods and final variables.
* Encapsulation helps in hiding the internal state of an object and restricting access to the object's internal data.
* interface or protocol is a common way to define a contract between objects that communicate with each other.
* For Example: In the context of a car, the user only needs to know how to drive the car and not the internal working of the car.
    -- Here the interface would be the steering wheel, pedals, and gear shift, which are the only things the user interacts with, while the internal working of the car is hidden from the user.
    -- And Protocol is a set of rules that defines how objects communicate with each other.

# INHERITANCE IN OOP (Object Oriented Programming)
1. Inheritance is the concept of creating a new class by inheriting the properties and methods of an existing class.
2. It is one of the four fundamental OOP concepts.
3. Inheritance helps in reusing the code and establishing a relationship between classes.
4. The class that is inherited from is called the base class or parent class, and the class that inherits from the base class is called the derived class or child class.
5. Inheritance can be of different types: Single Inheritance, Multiple Inheritance, Multilevel Inheritance, and Hierarchical Inheritance.
6. Single Inheritance: A class inherits from only one base class.
7. Multiple Inheritance: A class inherits from multiple base classes.
8. Multilevel Inheritance: A class inherits from a derived class, which in turn inherits from another base class.
9. Hierarchical Inheritance: Multiple classes inherit from a single base class.
10. For Example: In the context of animals, a Dog class can inherit from an Animal class, which contains common properties and methods shared by all animals.

# POLYMORPHISM IN OOP (Object Oriented Programming)